package templates 

import "github.com/MaratBR/openlibrary/internal/app"
import "fmt"
import "github.com/MaratBR/openlibrary/internal/i18n"
import "github.com/MaratBR/openlibrary/web/olresponse"


templ SearchPage(
    result *app.BookSearchResult,
    explainedQuery app.DetailedBookSearchQuery,
) {
    {{
        l := i18n.GetLocalizer(ctx)
    }}

    @baseLayout("Search") {
        @i18nExtractKeys(l, []string{
            "common.more",
            "common.less",

            "search.search",
            "search.doSearch",
            "search.includeTags",
            "search.excludeTags",
            "search.includeAuthors",
            "search.excludeAuthors",
            "search.author",
            "search.words",
            "search.chapters",
            "search.wordsPerChapter",
            "search.favorites",
            "search.tags",
            "search.genres",
        })

        <div class="ol-container my-12 px-2" x-data={ fmt.Sprintf("{ openFilters: %t }", len(result.Books) == 0) }>
            @SearchResultFragment(result, explainedQuery)
        </div>
    }
}

templ SearchResultFragment(
    result *app.BookSearchResult,
    explainedQuery app.DetailedBookSearchQuery,
) {

    {{
        l := i18n.GetLocalizer(ctx)
        var pagination templ.Component
        if result.TotalPages > 1 {
            pagination = olresponse.PaginationImpl(olresponse.PaginationImplProps{
                Page: result.Page,
                TotalPages: result.TotalPages,
                Size: 9,
                UseAlpineJsAjax: true,
            })
        } else {
            pagination = templ.NopComponent
        }
        activeFilters := explainedQuery.ActiveFilters()
    }}


    <main id="PaginationAjaxSlot">
        @jsonTemplate("data-search-explained-query", explainedQuery)

        <h1 class="page-header">
            if activeFilters == 1 && len(explainedQuery.IncludeTags) == 1 {
                {{ firstTag := explainedQuery.IncludeTags[0] }}
                <span>{ firstTag.Name }</span>
            } else {
                <span>{ _t(l, "search.search") }</span>
            }
        </h1>

        <form class="mt-5">
            <input id="search-input" name="q" class="input p-6 rounded-full text-lg w-full" value={ explainedQuery.Query } />
        </form>

        <div class="flex gap-2 my-4">
            <button @click="openFilters=!openFilters" class="btn btn--lg btn--secondary rounded-full">
                <span class="material-symbols-outlined">filter_list</span>
                {_t(l, "search.filters")}
                if activeFilters > 0 {
                    ({ formatInt32(int32(activeFilters)) })
                }
            </button>
        </div>


        <section class="search-filters" x-cloak x-show="openFilters" x-collapse>
            <div class="p-4">
                <ol-island data={ "{\"searchInputId\": \"search-input\"}" } active="true" src="/_/assets/islands/search-filters.js" />
            </div>
        </section>

        if len(result.Books) == 0 {
            @searchNoResultsCard()
        } else {
            @pagination
            <ul role="listbox" id="results" class="book-search-results">
                {{
                    l := i18n.GetLocalizer(ctx)
                    tags := make(map[int64]app.DefinedTagDto, len(result.Tags))
                    for _, tag := range result.Tags {
                        tags[tag.ID] = tag
                    }
                }}
                for _, book := range result.Books {
                    <li role="listitem" id={ fmt.Sprintf("book-%d", book.ID) } class="book-search-card">
                        <div class="book-search-card__left">
                            <a class="book-search-card__imglink" href={ templ.SafeURL(fmt.Sprintf("/book/%d", book.ID)) }>
                                @bookCover(book.Cover, book.Name, 200)
                            </a>
                        </div>
                        
                        <div class="book-search-card__right">
                            <a href={ templ.SafeURL(fmt.Sprintf("/book/%d", book.ID)) } class="link book-search-card__link">{ book.Name }</a>                    
                            <br />
                            by
                            <a class="link book-search-card__author" href={ templ.SafeURL(fmt.Sprintf("/users/%s", book.Author.ID.String())) }>
                                { book.Author.Name }
                            </a>

                            @collapsible(160, true) {
                                <ul class="book-search-card__tags [&:not([data-expand=true])>li:nth-child(n+7):not(:last-child)]:hidden" 
                                    data-expand="false"
                                    :data-expand="expand"
                                    x-data="{expand:false}">
                                    for _, tagId := range book.Tags {
                                        {{ tag := tags[int64(tagId)] }}
                                        <li class="tag">
                                            <a href={ templ.SafeURL(fmt.Sprintf("/tag/%d", tagId)) }>
                                                { tag.Name }
                                            </a>
                                        </li>
                                    }

                                    <li 
                                        if len(book.Tags) <= 6 {
                                            x-show="false" x-cloak
                                        }
                                        @click="expand=!expand" class="book-search-card__tags__more">
                                        <span x-text="i18n[expand?'common.less':'common.more']">{ _t(l, "common.more") }</span>
                                    </li>
                                </ul>

                                if book.Summary != "" {
                                    <div class="book-search-card__summary __user-content" x-ignore>
                                        @templ.Raw(book.Summary)
                                    </div>
                                }
                            }
                        </div>
                    </li>
                }
            </ul>
            <div class="pt-4">
                @pagination
            </div>
        }
    </main>
}

templ searchNoResultsCard() {
    {{ l := i18n.GetLocalizer(ctx) }}

    <div class="my-8 px-12 text-lg overflow-hidden rounded-xl grid grid-cols-[auto_1fr] bg-[#dee0e2] dark:bg-[#211f1d] max-w-[600px]">
        <div>
            <img class="dark:invert" aria-hidden="true" src="/_/embed-assets/book_question.h300.webp" />
        </div>
        <div class="p-4 flex items-center">
            <p class="text-3xl font-title">
                { _t(l, "search.noResults") }
            </p>
        </div>
    </div>
}

css simpleSearchCSSRoot() {
    width: 100vw;
    height: 100vh;
    display: flex;
    justify-content: center;
    align-items: center;
    flex-direction: column;
}

templ SimpleSearch() {
    {{
        l := i18n.GetLocalizer(ctx)
    }}
    @htmlLayout(_t(l, "search.search")) {
        <main class={ simpleSearchCSSRoot() }>
            <img class="dark:hidden" src="/_/embed-assets/logo.svg" />
            <img class="hidden dark:block" src="/_/embed-assets/logo-dark.svg" />
            <form method="get" action="/search">
                <input placeholder={_t(l, "search.search")} class="w-96 input rounded-full text-lg p-6" name="query" />
                <div class="flex gap-2 justify-center mt-8">
                    <a href="/random" class="btn btn--secondary rounded-full">
                        {_t(l, "search.feelingLucky")}
                    </a>
                    <button type="submit" class="btn btn--secondary rounded-full">
                        {_t(l, "search.doSearch")}
                    </button>
                </div>
            </form>

            <footer class="fixed bottom-4 left-0 right-0 flex justify-center">
                @themeSwitcher()
            </footer>
        </main>
    }
}