package templates

import "github.com/MaratBR/openlibrary/internal/i18n"
import "github.com/MaratBR/openlibrary/internal/app"
import "fmt"
import "github.com/gofrs/uuid"
import "github.com/MaratBR/openlibrary/internal/auth"
import "strconv"
import "net/url"

templ bookTopReviews(
    reviews []app.ReviewDto, 
    authorID uuid.UUID,
) {
    {{
        userId := auth.GetNullableUserID(ctx)
    }}

    <ul class="space-y-2">
        for _, review := range reviews {
            if !userId.Valid || userId.UUID != review.User.ID {
                @bookReview(review, review.User.ID == authorID)
            }
        }
    </ul>
}

templ bookReview(
    review app.ReviewDto, 
    isAuthor bool,
) {
    <div
        class="group grid grid-cols-[auto_1fr] gap-6 p-4 relative border-b last:border-b-0"
        id={fmt.Sprintf("review-%s", review.User.ID.String())}>

        <div>
            <img class="avatar" src={ review.User.Avatar } />
        </div>


        <div>
            <span class="mb-2 flex gap-1">
                <a class="link text-lg" href={ templ.SafeURL(fmt.Sprintf("/users/%s", review.User.ID)) }>{ review.User.Name }</a>
                if isAuthor {
                    <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24">
                        <g
                            fill="none"
                            stroke="currentColor"
                            stroke-linecap="round"
                            stroke-linejoin="round"
                            stroke-width="1.5"
                            color="currentColor"
                        >
                            <path d="M5.076 17C4.089 4.545 12.912 1.012 19.973 2.224c.286 4.128-1.734 5.673-5.58 6.387c.742.776 2.055 1.753 1.913 2.974c-.1.868-.69 1.295-1.87 2.147C11.85 15.6 8.854 16.78 5.076 17" />
                            <path d="M4 22c0-6.5 3.848-9.818 6.5-12" />
                        </g>
                    </svg>
                }
            </span>

            <div class="mb-2">
                @starRating(float64(review.Rating), 0.4)
            </div>
            @collapsibleRawHtml(fmt.Sprintf("review-%s", review.User.ID.String()), review.Content)
        </div>

        <div class="text-muted-foreground transition-opacity opacity-0 group-hover:opacity-100 absolute top-2 right-2 flex gap-2">
            <button class="btn btn--icon btn--ghost">
                <i class="fa-solid fa-flag"></i>
            </button>
        </div>
    </div>
}

templ BookMyReview(
    bookID int64,
    ratingAndReview app.RatingAndReview,
) {
    {{
        _, authorized := auth.GetSession(ctx)
        l := i18n.GetLocalizer(ctx)
    }}
    
    <section id={ fmt.Sprintf("book-%d-my-review", bookID) } data-book-id={ fmt.Sprintf("%d", bookID) } class="my-2" x-data="{
        edit:false,
        loading:false,
        start:0,
        requestEditing() {
            this.loading = true;
            this.start = Date.now();
            if(this.$refs.myReview) this.$refs.myReview.style.height=`${this.$refs.myReview.clientHeight}px`;
        },
        onEditorReady() {
            window.delay(Math.max(0, 300-(Date.now()-this.start))).then(() => {
                this.loading = false;
                this.edit = true;
                if (this.$refs.myReview) this.$refs.myReview.style.removeProperty('height');
            })
        },
        onUpdated(review) {
            this.loading = false;
            this.edit = false;
            $ajax(`/book/${this.$root.dataset.bookId}/__fragment/review`);
        }
    }">
        if ratingAndReview.Review.Valid {
            {{ review := ratingAndReview.Review.Value }}
            <div x-ref="myReview" class="shadow-[0_0_16px] shadow-foreground/10 rounded-xl p-4 nojs-hidden">
                @jsonTemplate("island-review-editor-data", ratingAndReview.Review.Value)
                <div class="grid grid-cols-[110px_auto]" x-show="!edit&&!loading">
                    <div>
                        <img class="avatar" src={ review.User.Avatar } />
                    </div>

                    <div>
                        <div class="flex gap-4 items-center">
                            @starRatingControllable(float64(review.Rating), 0.5, templ.Attributes{
                                "id": "current-review-rating",
                            })
                            <button @click="requestEditing()" class="btn btn--lg btn--outline ">
                                <i class="fa-solid fa-pencil"></i>
                                { _t(l, "reviews.editReview") }
                            </button>
                        </div>
                        <article class="__user-content mt-4 text-sm">
                            @collapsibleRawHtml("current-review-content", review.Content)
                        </article>
                    </div>
                </div>

                <div x-cloak x-show="loading" class="flex items-center justify-center h-full">
                    <span class="loader m-0"></span>
                </div>
                
                <ol-island
                    src="/_/assets/islands/review-editor.js" 
                    x-show="edit"
                    :active="loading||edit"
                    @review:updated="onUpdated($event.detail)"
                    @island:mount="onEditorReady()" />
            </div>
        }
        
        if !ratingAndReview.Review.Valid {
            <div x-show="edit" x-cloak class="shadow-[0_0_16px] shadow-foreground/10 rounded-xl p-4 nojs-hidden">
                <ol-island 
                    src="/_/assets/islands/review-editor.js" 
                    :active="loading||edit"
                    @review:updated="onUpdated($event.detail)"
                    @island:mount="onEditorReady()" />
            </div>


            <div class="pt-6 pb-8 rounded-xl items-start gap-4 my-8" x-show="!edit">
                if authorized {
                    <div class="flex flex-col items-center">
                        <span class="mt-3 block text-3xl font-title font-semibold">
                            @templ.Raw(l.T("book.whatDoYouThink"))
                        </span>
                        <div class="flex gap-6 items-center mt-4">
                            {{
                                var (
                                    initialValue float64
                                    text string
                                )
                                if ratingAndReview.Rating.Valid {
                                    initialValue = float64(ratingAndReview.Rating.Value)
                                    text = l.TData("book.youRated", map[string]string{
                                            "rating": strconv.FormatFloat(initialValue/2, 'f', -1, 32),
                                        })
                                } else {
                                    initialValue = 0.0
                                    text = l.T("book.rateBook")
                                }
                            }}
                            <div class="flex flex-col items-center" x-data={ fmt.Sprintf("{rating:%f}", initialValue) }>
                                @starRatingInput(0.3, initialValue, fmt.Sprintf(`
                                    rating=$event.detail;
                                    OL.api.reviews.updateRating('%d', rating).then(() => window.toast({
                                        text: i18n['book.thankYouForRating'],
                                        title: i18n['book.ratingSaved'],
                                        type: 'success',
                                    }))
                                `, bookID))
                                <span
                                    x-text="!rating?i18n['book.rateBook']:i18n['book.youRated'].replaceAll('{{.rating}}',rating/2)"
                                    class="font-light">
                                    { text }
                                </span>
                            </div>
                            <button class="btn btn--outline btn--lg text-lg p-6 " @click="requestEditing()">
                                <span x-show="!loading">
                                    { l.T("book.writeReview") }
                                </span>
                                <span x-cloak x-show="loading" class="loader mx-8"></span>
                            </button>
                        </div>
                    </div>
                } else {
                    <span class="mt-3 block text-3xl font-title font-semibold">
                        @templ.Raw(l.T("book.whatDoYouThink"))
                    </span>
                    {{
                        query := url.Values{
                            "next": []string{fmt.Sprintf("/book/%d", bookID)},
                        }
                        href := "/login?" + query.Encode()
                    }}
                    <a class="btn btn--outline btn--lg text-lg p-6  mt-4" href={templ.URL(href)}>
                        { l.T("book.writeReviewLogin") }
                    </a>
                }
            </div>
        } 
    </section>
}

templ collapsibleRawHtml(id, html string) {
    {{ 
        canBeCollapsed :=  approximateLines(831, 18, html) >= 8
    }}

   @collapsible(250, canBeCollapsed) {
        <div id={id} class="contents __user-content" x-ignore>
            @templ.Raw(html)
        </div>
   }
}

templ collapsible(height int, canBeCollapsed bool) {
    {{ 
        l := i18n.GetLocalizer(ctx)
    }}

    <div 
        x-data="collapseContent"
        data-collapsible-height={ fmt.Sprintf("%d", height) }
        :data-expanded="expand"
        if canBeCollapsed {
            data-collapsible-init
            data-collapsible="true"
        }
        :data-collapsible="can"
        :style={ fmt.Sprintf("`max-height:${expand?10000:%d}px;`", height) }
        { templ.Attributes{
            "style": fmt.Sprintf("max-height:%dpx", height),
        }... }
        class="mb-4 relative overflow-y-hidden 
        data-[expanded=true]:pb-10
        after:hidden data-[collapsible=true]:after:block data-[expanded=true]:after:hidden
        after:absolute after:h-16 after:left-0 after:right-0 after:bottom-0 
        after:bg-gradient-to-t after:from-background after:via-background/95 after:to-transparent">
        <div x-bind="content">
            { children... }
        </div>

        <button 
            x-bind="button"
            if !canBeCollapsed {
                x-cloak
            }
            class="absolute flex items-center left-0 right-0 bottom-0 p-1 z-10 text-lg font-[500] hover:text-primary focus:outline focus:outline-2 outline-offset-[-2px]">
            <span x-bind="buttonLabel">{ _t(l, "common.more") }</span>
            <i x-bind="buttonIcon" class="fa-solid fa-chevron-down"></i>
        </button>
    </div>
}