package templates

import "github.com/MaratBR/openlibrary/internal/app"
import "fmt"
import "encoding/json"
import "github.com/nicksnyder/go-i18n/v2/i18n"
import "github.com/MaratBR/openlibrary/internal/i18n-provider"
import "crypto/md5"

templ BookPage(
    book app.BookDetailsDto,
    ratingAndReview app.RatingAndReview,
    readingListStatus app.Nullable[app.BookReadingListDto],
    topReviews []app.ReviewDto,
) {
    {{
        l := i18nProvider.GetLocalizer(ctx)
        tab := "reviews"
    }}
    
    @bookPageLayout(book, readingListStatus) {
        @i18nExtractKeys(l, []string{ "common.more", "common.less", "common.save" })

        <div x-ignore class="mt-4 __user-content">
            @templ.Raw(book.Summary)
        </div>
        <div class="mt-4 text-muted-foreground font-medium">
            @bookRatingBadge(book.AgeRating)
        </div>
        <div class="mt-6">
            @bookTags(book.Tags)
        </div>
        @bookRating(&book)

        <section x-data={ fmt.Sprintf("{ tab: '%s', once: false }", tab) }>
            <header role="tablist" class="flex gap-4 items-baseline">
                <span role="tab"
                    @click.prevent="tab='reviews'"
                    if tab == "reviews" {
                        data-active="true"
                    }
                    :data-active="tab==='reviews'"
                    class="cursor-pointer font-title text-2xl my-2 font-medium text-muted-foreground hover:underline data-[active]:text-3xl data-[active]:text-foreground">
                    { l.MustLocalize(&i18n.LocalizeConfig{
                        MessageID: "reviews.title",
                    }) }
                </span>
                <span role="tab" data-no-instant
                    @click.prevent="tab='toc'"
                    if tab == "toc" {
                        data-active="true"
                    }
                    :data-active="tab==='toc'"
                    class="cursor-pointer font-title text-2xl my-2 font-medium text-muted-foreground hover:underline data-[active]:text-3xl data-[active]:text-foreground">
                    { l.MustLocalize(&i18n.LocalizeConfig{
                        MessageID: "book.toc",
                    }) }
                </span>
            </header>

            <div
                role="tabpanel"
                if tab != "reviews" {
                    x-cloak
                } 
                class="contents" 
                x-show="tab==='reviews'">
                @BookMyReview(book.ID, ratingAndReview)
                @bookTopReviews(topReviews, book.Author.ID)
            </div>

            <div role="tabpanel" class="contents" id="slot-book-toc" x-merge="replace" x-cloak x-show="tab==='toc'" x-init={ fmt.Sprintf(`let load=()=>$ajax('/book/%d/__fragment/toc');tab=='toc'?load():$watch('tab',tab=>{tab==='toc'&&load();})`, book.ID) }>
                <div class="h-[600px] mt-4">
                    <span class="loader mt-4"></span>
                </div>
            </div>
        </section>


    }
}

templ bookRatingBadge(rating app.AgeRating) {
    <span class="ol-age-rating" data-rating={string(rating)}>
        {string(rating)}
    </span>
}

func convertBookDetailsToAlpineState(book *app.BookDetailsDto, readingList app.Nullable[app.BookReadingListDto]) string {
    var state struct {
        ReadingList app.Nullable[app.BookReadingListDto] `json:"rl"`
        BookID int64 `json:"bookId,string"`
    }
    state.ReadingList = readingList
    state.BookID = book.ID
    bytes, _ := json.Marshal(state)
    return string(bytes)
}

func getBookCoverURL(name string, height int) string {
    h := md5.New()
    h.Write([]byte(name))
    hash := h.Sum(nil)
    

    id := (hash[2] % 5) + 1

    if height <= 200 {
        return fmt.Sprintf("/_/embed-assets/cover/%d.h200.webp", id)
    }

    if height <= 300 {
        return fmt.Sprintf("/_/embed-assets/cover/%d.h300.webp", id)
    }

    return fmt.Sprintf("/_/embed-assets/cover/%d.jpg", id)
}

templ bookPageLayout(book app.BookDetailsDto, readingList app.Nullable[app.BookReadingListDto]) {
    @baseLayout(book.Name) {
        <div 
            id="book" 
            class="ol-book-page" 
            x-data={ convertBookDetailsToAlpineState(&book, readingList) }>
            @serverData(map[string]any{
                "bookId": fmt.Sprintf("%d", book.ID),
            })
            <div class="ol-book-page__left">
                @bookCover(book.Cover, book.Name, 300)
                @bookReadingList(book.ID, readingList)
            </div>
            <div class="ol-book-page__right">
                <header>
                    <h1 class="page-header">{book.Name}</h1>
                    <p>
                        <a class="link" href={templ.SafeURL(fmt.Sprintf("/users/%s", book.Author.ID.String()))}>{book.Author.Name}</a>
                    </p>
                </header>

                <main class="contents" id="slot-book-page">
                    { children... }
                </main>
            </div>
        </div>
    }
}

templ bookRating(book *app.BookDetailsDto) {
    <a id="rating-card" href="#reviews" class="ol-book-page__rating-card">
        @starRating(book.Rating.Value, 0.5)
        <div class="text-xs inline-block">
            {formatInt32(book.Votes)} votes <br />
            {formatInt32(book.Reviews)} reviews
        </div>
    </a>
}

templ bookCover(cover, bookName string, height int) {
    {{
        if cover == "" {
            cover = getBookCoverURL(bookName, height)
        }
    }}

    <div class="ol-book-cover" { templ.Attributes{
            "style": fmt.Sprintf("height:%dpx", height),
        }... }>
        <img loading="lazy" src={ cover } />
    </div>
} 

templ bookTags(tags []app.DefinedTagDto) {
    {{ l := i18nProvider.GetLocalizer(ctx) }}
    <ul 
        if len(tags) > 10 {
            data-hidden
        }
        :data-hidden="!open" 
        x-data={ fmt.Sprintf("{len:%d,open:false}", len(tags)) } 
        class="[&>li]:inline [&>li]:me-2 [&[data-hidden]>li:not(:last-child):nth-child(n+11)]:hidden">
        for _, t := range tags {
            <li>
                @tag(t)
            </li>
        }
        <li 
            if len(tags) <= 10 {
                x-cloak
            }
            class="nojs-hidden" role="button" x-show="len>10" @click="open=!open">
            <span class="ol-tag font-semibold nojs-hidden" x-text="i18n[open?'common.less':'common.more']">
                {l.MustLocalize(&i18n.LocalizeConfig{
                    MessageID: "common.more",
                })}
            </span>
        </li>
    </ul>
}


