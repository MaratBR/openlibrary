package templates

import "github.com/MaratBR/openlibrary/internal/app"
import "github.com/MaratBR/openlibrary/internal/i18n"
import "fmt"
import "github.com/MaratBR/openlibrary/internal/olhttp"
import "github.com/MaratBR/openlibrary/internal/csrf"

templ Library(wantToRead, reading, paused []app.BookLibraryDto) {
    {{
        l := i18n.GetLocalizer(ctx)
    }}

    @baseLayout(_t(l, "library.title")) {
        <header class="library-header">
            <div class="ol-container flex gap-4">
                @libraryTab(_t(l, "library.title"), "/library", true)
                @libraryTab(_t(l, "library.archive"), "/library/archive", false)
                @libraryTab(_t(l, "library.collections"), "/library/collections", false)
            </div>
        </header>
        <main class="ol-container">
            <ol-island 
                data={ "{\"selector\": \".library-body\"}" }
                src="/_/assets/islands/book-card-preview.js" 
                active="true" />
        
            <div class="library-body">
                if len(reading) + len(paused) + len(wantToRead) == 0 {
                    <p>
                        {_t(l, "library.libraryDescription")}
                    </p>
                }

                if len(reading) != 0 {
                    @librarySection(_t(l, "readingList.reading"), reading)
                }
                if len(paused) != 0 {
                    @librarySection(_t(l, "readingList.paused"), paused)
                }
                if len(wantToRead) != 0 {
                    @librarySection(_t(l, "readingList.want_to_read"), wantToRead)
                }
            </div>
        </main>
    }
}

templ libraryTab(
    title, url string,
    active bool,
) {
    if active {
        <h1 class="library-header__item library-header__item--active">{title}</h1>
    } else {
        <a href={templ.SafeURL(url)} class="library-header__item">{title}</a>
    }
}


templ librarySection(label string, books []app.BookLibraryDto) {
    <section class="library-section">
        <header class="library-section__header">
            { label }
        </header>
        <div class="library-section__books">
            for _, book := range books {
                @libraryBookCard(book.ID, book.Name, book.Cover)
            }
        </div>
    </section>
}

templ libraryBookCard(bookID int64, name, cover string) {
    <a 
        href={ templ.SafeURL(fmt.Sprintf("/book/%d?ol.from=library", bookID)) } 
        class="profile-book-card-sm" 
        data-book-card-preview={ fmt.Sprintf("%d", bookID) }>
        @bookCover(cover, name, 300)
        <div class="profile-book-card-sm__title">
            { name }
        </div>
    </a>
}


templ LibraryArchive(read, dnf []app.BookLibraryDto) {
    {{
        l := i18n.GetLocalizer(ctx)
    }}

    @baseLayout(_t(l, "library.title")) {
        <header class="library-header">
            <div class="ol-container flex gap-4">
                @libraryTab(_t(l, "library.title"), "/library", false)
                @libraryTab(_t(l, "library.archive"), "/library/archive", true)
                @libraryTab(_t(l, "library.collections"), "/library/collections", false)
            </div>
        </header>


        <main class="ol-container">
            <ol-island 
                data={ "{\"selector\": \".library-body\"}" }
                src="/_/assets/islands/book-card-preview.js" 
                active="true" />
        
            <div class="library-body">
                if len(read) + len(dnf) == 0 {
                    <p>
                        {_t(l, "library.archiveDescription")}
                    </p>
                }

                if len(read) != 0 {
                    @librarySection(_t(l, "readingList.read"), read)
                }
                if len(dnf) != 0 {
                    @librarySection(_t(l, "readingList.dnf"), dnf)
                }
            </div>
        </main>
    }
}

templ LibraryCollections(result app.GetUserCollectionsResult, booksMap map[int64][]app.CollectionBookDto) {
    {{
        l := i18n.GetLocalizer(ctx)
    }}
        @baseLayout(_t(l, "library.title")) {
        <header class="library-header">
            <div class="ol-container flex gap-4">
                @libraryTab(_t(l, "library.title"), "/library", false)
                @libraryTab(_t(l, "library.archive"), "/library/archive", false)
                @libraryTab(_t(l, "library.collections"), "/library/collections", true)
            </div>
        </header>

        <main class="ol-container">
            <ol-island 
                data={ "{\"selector\": \".library-body\"}" }
                src="/_/assets/islands/book-card-preview.js" 
                active="true" />

            {{
                pagination := olhttp.Pagination(uint32(result.Page), uint32(result.TotalPages), 6)
            }}
        
            <div class="library-body" x-data="{name:'',open:false}">
                <button x-show="!open" @click="open=true" class="flex items-center gap-4 hover:bg-highlight w-full transition-colors -m-2 p-2 rounded-lg">
                    <div class="bg-muted text-2xl rounded-full size-16 flex items-center justify-center">
                        <i class="fa-solid fa-plus"></i>
                    </div>

                    <span class="font-medium text-lg">
                        {_t(l, "collection.createCollection")}
                    </span>
                </button>

                <section class="card border-none relative" x-cloak x-show="open">
                    <form method="post" x-data="{name:''}" class="m-2">
                        @csrf.CSRFInputTempl(ctx)
                        <input @blur="if (!$event.target.value) open=false" name="name" required maxlength="255" x-model="name" class="w-full block text-3xl font-medium !outline-none bg-transparent" placeholder={_t(l, "collection.namePlaceholder")} />
                        <div x-collapse x-cloak x-show="name.trim().length>0">
                            <button type="submit" class="mt-4 btn btn--outline btn--lg">
                                {_t(l, "collection.createCollection")}
                            </button>
                        </div>
                    </form>
                </section>

                if result.TotalPages > 0 {
                    if result.TotalPages > 1 {
                        @pagination
                    }
                    @collectionsList(result.Collections, booksMap)
                    if result.TotalPages > 1 {
                        @pagination
                    }
                }
            </div>
        </main>
    }
}

templ collectionsList(collections []app.CollectionDto, booksMap map[int64][]app.CollectionBookDto) {
    <ul class="space-y-2">
        for _, col := range collections {
            {{
                books, _ := booksMap[col.ID]
            }}
            @libraryCollectionCard(col, books)
        }
    </ul>
}

templ libraryCollectionCard(collection app.CollectionDto, books []app.CollectionBookDto) {
    <li class="library-user-collection">
        <a href={ templ.SafeURL(fmt.Sprintf("/col/%d", collection.ID)) } class="library-user-collection__header">
            {{
                name := collection.Name
                if name == "" {
                    name = "NO_NAME"
                }
            }}
            <div class="library-user-collection__name">{ name }</div>

            <div class="text-muted-foreground">
                {{
                    l := i18n.GetLocalizer(ctx)
                }}
                { _tt(l, "collection.books", map[string]string{
                    "count": fmt.Sprintf("%d", collection.BooksCount),
                }) }
            </div>
        </a>

        if len(books) > 0 {
            <ul class="flex gap-1">
                for _, book := range books {
                    {{
                        cover := book.Cover
                        if cover == "" {
                            cover = getBookCoverURL(book.Name, 100)
                        }
                    }}
                    <li>
                        <a href={ templ.SafeURL(fmt.Sprintf("/book/%d", book.ID)) }>
                            <img src={ cover } class="rounded-r-md" style="height: 90px;" />
                        </a>
                    </li>
                }
            </ul>
            }
    </li>
}