package templates

import "context"
import "github.com/MaratBR/openlibrary/internal/app"
import "github.com/MaratBR/openlibrary/internal/i18n"
import "github.com/MaratBR/openlibrary/internal/commonutil"
import "fmt"

templ BookTOC(
    ctx context.Context,
    bookID int64,
    chapters []app.BookChapterDto,
    activeChapterID int64,
) {
    {{ l := i18n.GetLocalizer(ctx) }}

    <div class="contents" id="slot-book-toc" x-cloak x-show="tab==='toc'">
        if len(chapters) == 0 {
            <section id="empty_toc" class="mt-4 p-2 border rounded-lg bg-card shadow-md">
                <h1 class="font-title text-xl font-semibold mb-2">{_t(l, "book.emptyToc")}</h1>
                <p>{_t(l, "book.emptyTocContent")}</p>
            </section>
        } else {
            <ol-scroll-blocker />
            <ul class="book-toc contain-layout p-1 contain-paint" role="listbox">
                for i, chapter := range chapters {
                    <li role="listitem">
                        <a
                            href={ templ.SafeURL(fmt.Sprintf("/book/%d/chapters/%d", bookID, chapter.ID)) } 
                            if chapter.ID == activeChapterID {
                                class="book-toc__item book-toc__item--readingNow"
                            } else {
                                class="book-toc__item"
                            }
                            >
                            <div class="book-toc__num">
                                <span>{ commonutil.FormatInt(i + 1) }</span>
                                if chapter.ID == activeChapterID {
                                    <span class="book-toc__mark">
                                        <i class="fa-solid fa-bookmark"></i>
                                    </span>
                                }
                            </div>
                            <div>
                                <div class="mb-1">
                                    { chapter.Name }
                                </div>
                                <span class="text-sm text-muted-foreground">
                                    {relativeTime(l, chapter.CreatedAt)},&nbsp;
                                    { _tt(l, "book.words", map[string]string{
                                        "count": commonutil.FormatInt(chapter.Words),
                                    }) }
                                </span>
                            </div>
                        </a>

                        // if chapter.Summary != "" {
                        //     <article class="ml-4 mt-1 mb-4 text-sm __user-content" x-ignore>
                        //         @templ.Raw( chapter.Summary )
                        //     </article>
                        // }
                    </li>
                }
            </ul>
        }
        
    </div>
}