package templates

import "github.com/MaratBR/openlibrary/web/olresponse"
import "github.com/MaratBR/openlibrary/internal/app"
import "github.com/MaratBR/openlibrary/web/frontend"
import "github.com/MaratBR/openlibrary/internal/flash"
import "github.com/MaratBR/openlibrary/internal/olhttp"
import "fmt"
import "github.com/MaratBR/openlibrary/internal/i18n"

templ flashMessages() {
    {{
        messages := flash.PullFlashes(ctx)
    }}

    if len(messages) > 0 {
        <div class="ol-container ol-container--big my-2">
            for _, message := range messages {
                <div x-data class="flash">
                    @message
                    <div class="flash__closeContainer">
                        <button @click="$root.remove()" class="flash__close">
                            <i class="fa-solid fa-xmark"></i>
                        </button>
                    </div>
                </div>
            }

            <div id="client-flashes" class="contents" />
        </div>
    }
}

templ renderUISettings() {
    {{
        uiSettings := getUIBookSettings(olhttp.GetRequest(ctx))
    }}
    @templ.Raw(fmt.Sprintf("<style>:root{--book-font-size:%dpx}</style>", uiSettings.FontSize))
}

templ siteFooter() {
    {{ 
        version := app.AppVersion()
    }}

    <footer id="site-footer" class="ol-container p-10">
        <a href="https://github.com/MaratBR/openlibrary" class="text-muted-foreground hover:text-foreground" target="_blank">
            Powered by <span class="font-[500] font-title">OpenLibrary</span> <br />
            <span class="text-sm">v:{ version }</span>
        </a>
    </footer>
}

type htmlLayoutProps struct {
    Title string
    CSS []string
}

templ htmlLayout(params htmlLayoutProps) {
    {{
        modCss := "/_/assets/common.css"
        var css []string

        if len(params.CSS) > 0 {
            css = append(params.CSS, modCss)
        } else {
            css = []string{modCss}
        }

        
    }}

    @olresponse.Doc(ctx, olresponse.DocSettings{
        Title: params.Title,
        Scripts: []string{ "/_/assets/common.js", "/_/assets/public.api.js", "/_/assets/alpinejs.js" },
        CSS: css,
        InstantClick: false,
        AppendToHead: templ.Join(
            frontend.InlineCSSAsset(ctx, "embed-assets", "fonts.css"),
        ),
    }) {
        @renderUISettings()
        { children... }
        {{
            l := i18n.GetLocalizer(ctx)
        }}
        @i18nExtractKeysByPrefix(l, "common")
    }
}

templ _baseLayout(params htmlLayoutProps) {
    @htmlLayout(params) {
        @siteHeader()
        @flashMessages()
        { children... }
        @siteFooter()
        <div id="toasts-root" class="flex flex-col left-1 bottom-1 fixed z-10 gap-1"></div>
    }
}

templ baseLayout(title string) {
    @_baseLayout(htmlLayoutProps{Title: title}) {
        { children... }
    }
}


templ baseLayoutNoFooter(title string) {
    @htmlLayout(htmlLayoutProps{Title: title}) {
        @siteHeader()
        @flashMessages()
        { children... }
        <div id="toasts-root" class="flex flex-col left-1 bottom-1 fixed z-10 gap-1"></div>
    }
}

// system (default) -> light -> dark 
script toggleTheme() {
    let theme = getCookie('ui_theme');
    switch (theme) {
        case 'light':
            theme = 'dark';
            break;
        case 'dark':
            theme = '';
            break;
        case 'system':
        default:
            theme = 'light'
            break;
    }
    document.cookie = 'ui_theme=' + theme
    document.body.classList.toggle('dark', theme === 'dark');
}

templ themeSwitcher() {
    {{
        l := i18n.GetLocalizer(ctx)
    }}
    <button 
        onclick={toggleTheme()}
        class="btn btn--secondary  size-12" 
        aria-label={_t(l, "uiTheme.switchTheme")}>
        <i class="fa-solid fa-sun dark:!hidden"></i>
        <i class="fa-solid fa-moon !hidden dark:!inline-block"></i>
    </button>
}