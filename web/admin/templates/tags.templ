package templates

import "context"
import "github.com/MaratBR/openlibrary/internal/app"
import "fmt"
import "net/url"
import "github.com/MaratBR/openlibrary/internal/olhttp"
import "github.com/MaratBR/openlibrary/internal/i18n"
import "github.com/MaratBR/openlibrary/internal/csrf"
import "encoding/json"

type TagsSearchRequest struct {
    SearchQuery string
    OnlyParentTags bool
    OnlyAdultTags bool
}

templ TagsList(result app.ListTagsResult, searchRequest TagsSearchRequest) {
    {{
        l := i18n.GetLocalizer(ctx)
        pagination := olhttp.Pagination(result.Page, result.TotalPages, 9)
    }}


    @dashboardLayout("Tags") {
        <div class="admin-page-content">
            <header class="admin-page-header">
                <h1 class="text-4xl font-title mb-3">Tags</h1>
                <p>View list of tags and create new tags or edit existing ones.</p>
            </header>

            <section class="admin-card p-4">
                <form method="get">
                    <input name="p" type="number" value={ fmt.Sprintf("%d", result.Page) } aria-hidden="true" class="hidden" />

                    <div class="flex gap-8 mb-3">
                        <div class="flex items-center gap-2">
                            <input
                                if searchRequest.OnlyParentTags {
                                    checked
                                } 
                                id="chk_onlyParentTags" name="onlyParentTags" type="checkbox" class="checkbox" />
                            <label class="label" for="chk_onlyParentTags">{ _t(l, "admin.tags.onlyParentTags") }</label>
                        </div>

                        <div class="flex items-center gap-2">
                            <input
                                if searchRequest.OnlyAdultTags {
                                    checked
                                } 
                                id="chk_onlyAdultTags" name="onlyAdultTags" type="checkbox" class="checkbox" />
                            <label class="label" for="chk_onlyAdultTags">{ _t(l, "admin.tags.onlyAdultTags") }</label>
                        </div>

                        <button type="submit" class="btn btn--primary">
                            { _t(l, "common.apply") }
                        </button>
                    </div>
                </form>

                @pagination

                <table id="slot-tags-table" class="-mx-4 my-4 table">
                    <thead>
                        <tr>
                            <th>ID</th>
                            <th>{ _t(l, "admin.tags.name") }</th>
                            <th>{ _t(l, "admin.tags.synonym") }</th>
                            <th>{ _t(l, "admin.tags.adult") }</th>
                            <th>{ _t(l, "admin.tags.spoiler") }</th>
                            <th>{ _t(l, "admin.tags.createdAt") }</th>
                        </tr>
                    </thead>
                    <tbody>
                        if len(result.Tags) == 0 {
                            <tr>
                                <td colspan="6">
                                    { _t(l, "admin.tags.noTags") }
                                </td>
                            </tr>
                        }

                        for _, tag := range result.Tags {
                            <tr>
                                <td>
                                    <span class="admin-id">
                                        { fmt.Sprintf("%d", tag.ID) }
                                    </span>
                                </td>
                                <td>
                                    <a class="link link--primary" href={ templ.SafeURL(fmt.Sprintf("/admin/tags/tag-details/%d", tag.ID)) }>{ tag.Name }</a>
                                    if tag.IsDefault {
                                        <i>({ _t(l, "admin.tags.default") })</i>
                                    }
                                </td>
                                <td>
                                    if tag.SynonymOf.Valid {
                                        <span>{ tag.Name }</span>
                                    } else {
                                        <span aria-label="none">--</span>
                                    }
                                </td>
                                <td>
                                    @tableBoolValue(tag.IsAdult)
                                </td>
                                <td>
                                    @tableBoolValue(tag.IsSpoiler)
                                </td>
                                <td>
                                    @tableTimeValue(tag.CreatedAt)
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
                @pagination
            </section>
        </div>
    }
}


const (
	tagsPaginationSize uint32 = 9
)

func getTagsPageURL(ctx context.Context, p uint32) templ.SafeURL {
    u := new(url.URL)
    r := olhttp.GetRequest(ctx)
    *u = *r.URL
    query := u.Query()
    if p == 1 {
        query.Del("p")
    } else {
        query.Set("p", fmt.Sprintf("%d", p))
    }
    u.RawQuery = query.Encode()
    return templ.SafeURL(u.String())
}

templ tagsPagination(result *app.ListTagsResult) {
    {{
        remaining := tagsPaginationSize - 1
        left := remaining / 2
        if left > result.Page - 1  {
            left = result.Page - 1
        }
        remaining -= left
        right := remaining
        if result.Page + right > result.TotalPages {
            right = result.TotalPages - result.Page
        }
        remaining -= right
        if remaining > 0 && left < result.Page - 1 {
            left += min(remaining, result.Page - 1 - left)
        }
    }}

    <nav role="listbox" class="pagination">
        for i := result.Page - left; i < result.Page; i++ {
            <a href={ getTagsPageURL(ctx, i) } class="pagination__item">
                { fmt.Sprintf("%d", i) }
            </a>
        }
        <a href="#" x-init="$el.href=window.location.href" class="pagination__item pagination__item--active">
            { fmt.Sprintf("%d", result.Page) }
        </a>
        for i := result.Page + 1; i <= result.Page + right; i++ {
            <a href={ getTagsPageURL(ctx, i) } class="pagination__item">
                { fmt.Sprintf("%d", i) }
            </a>
        }
    </nav>
}

templ Tag(tag app.TagDetailsItemDto) {
    {{ l := i18n.GetLocalizer(ctx) }}

    @dashboardLayout("Admin - " + tag.Name) {
        <div class="admin-page-content">
            <header class="admin-page-header">
                <h1 class="my-6 font-title text-5xl">
                    { tag.Name }
                </h1>

                <article class="admin-card p-4">
                    if tag.Description == "" {
                        <p class="text-muted-foreground">
                            { _t(l, "admin.tags.noDescription") }
                        </p>
                    } else {
                        <p>{ tag.Description }</p>
                    }
                </article>
            </header>

            <div class="admin-card p-4">
                <div class="space-y-2">
                    @tagParam(_t(l, "admin.tags.adult"), tableBoolValue(tag.IsAdult))
                    @tagParam(_t(l, "admin.tags.spoiler"), tableBoolValue(tag.IsSpoiler))
                </div>
            </div>

            <div class="flex gap-2 mt-10">
                <a href={templ.URL(fmt.Sprintf("/admin/tags/tag-details/%d/edit", tag.ID))} class="btn btn--lg btn--outline" x-init>
                    { _t(l, "common.edit") }
                </a>

                <button class="btn btn--lg btn--destructive" x-init @click="alert('not implemented')">
                    { _t(l, "common.delete") }
                </button>
            </div>
        </div>
    }
}

templ TagEdit(tag app.TagDetailsItemDto) {
    {{ l := i18n.GetLocalizer(ctx) }}

    @dashboardLayout("Admin - " + tag.Name) {
        <div class="admin-page-content">
            <form method="post">
                @csrf.CSRFInputTempl(ctx)

                <header class="admin-page-header">
                    <input autocomplete="off" name="name" required value={tag.Name} class="input-transparent border-b-2 border-current my-6 font-title text-5xl bg-transparent">

                    <article class="admin-card">
                        <textarea rows="10" name="description" class="textarea p-4 w-full" placeholder={_t(l, "admin.tags.noDescription")}>{tag.Description}</textarea>
                    </article>
                </header>

                <div class="admin-card p-4 space-y-4">
                    <div class="admin-form-field">
                        <div class="admin-form-field__label">
                            <label for="type">{_t(l, "admin.tags.synonymOf")}</label>
                        </div>
                        {{
                            var synonymOfTagJson string

                            if tag.SynonymOf.Valid {
                                var v struct {
                                    ID int64 `json:"id,string"`
                                    Name string `json:"name"`
                                }
                                v.ID = tag.SynonymOf.Value.ID
                                v.Name = tag.SynonymOf.Value.Name
                                b, _ := json.Marshal(v)
                                synonymOfTagJson = string(b)
                            } else {
                                synonymOfTagJson = "null"
                            }
                        }}
                        <div class="admin-form-field__value" x-data={fmt.Sprintf("{tag:%s,open:false}", synonymOfTagJson)}>
                            <input :value="tag?tag.id:''" name="synonymOf" type="hidden" />
                            <span class="mb-2 inline-block">
                                <span 
                                    if tag.SynonymOf.Valid {
                                        x-cloak
                                    }
                                    x-show="!tag">{_t(l, "common.none")}</span>
                                <span x-text="tag?tag.name:''">
                                    {tag.SynonymOf.Value.Name}
                                </span>
                            </span><br />
                            <button type="button" class="btn btn--sm btn--secondary" @click="open=true">
                                {_t(l, "common.change")}
                            </button>
                            <ol-island 
                                @selected="tag=$event.detail;open=false"
                                @close="open=false"
                                active="true" 
                                src="/_/assets/islands/admin.js" 
                                name="SimpleTagInputModal" 
                                :data="JSON.stringify({open})"  />
                        </div>
                    </div>
                    <div class="admin-form-field">
                        <div class="admin-form-field__label">
                            <label for="type">{_t(l, "admin.tags.type")}</label>
                        </div>
                        <div class="admin-form-field__value">
                            <select id="type" name="type" class="input">
                                for _, cat := range app.TagsCategoryList {
                                    <option 
                                        if tag.Category == cat {
                                            selected
                                        }
                                        value={ cat.String() }>{_t(l, fmt.Sprintf("tagType.%s", cat.String()))}</option>
                                }
                            </select>
                        </div>
                    </div>
                    <div class="admin-form-field">
                        <div class="admin-form-field__label">
                            <label for="adult">{_t(l, "admin.tags.adult")}</label>
                            <p class="text-muted-foreground">
                                {_t(l, "admin.tags.adultDescription")}
                            </p>
                        </div>
                        <div class="admin-form-field__value">
                            <label class="switch">
                                <input id="adult" name="adult" type="checkbox">
                                <span class="switch__slider" />
                            </label>
                        </div>
                    </div>
                    <div class="admin-form-field">
                        <div class="admin-form-field__label">
                            <label for="spoiler">{_t(l, "admin.tags.spoiler")}</label>
                            <p class="text-muted-foreground">
                                {_t(l, "admin.tags.spoilerDescription")}
                            </p>
                        </div>
                        <div class="admin-form-field__value">
                            <label class="switch">
                                <input id="spoiler" name="spoiler" type="checkbox">
                                <span class="switch__slider" />
                            </label>
                        </div>
                    </div>
                </div>

                <div class="flex gap-2 mt-10">
                    <button class="btn btn--lg btn--primary" type="submit">
                        { _t(l, "common.save") }
                    </button>
                </div>
            </form>
        </div>
    }
}


templ tagParam(name string, value templ.Component) {
    <div class="w-48 flex items-start">
        <div class="mr-auto">{ name }</div>
        <div>
            @value
        </div>
    </div>
}