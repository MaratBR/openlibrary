// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: query.favorites.sql

package store

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const isFavoritedBy = `-- name: IsFavoritedBy :one
select is_favorite
from favorites
where user_id = $1 and book_id = $2
`

type IsFavoritedByParams struct {
	UserID pgtype.UUID
	BookID int64
}

func (q *Queries) IsFavoritedBy(ctx context.Context, arg IsFavoritedByParams) (bool, error) {
	row := q.db.QueryRow(ctx, isFavoritedBy, arg.UserID, arg.BookID)
	var is_favorite bool
	err := row.Scan(&is_favorite)
	return is_favorite, err
}

const recalculateBookFavorites = `-- name: RecalculateBookFavorites :exec
update books
set favorites = coalesce((select count(*) from favorites where book_id = $1 and is_favorite), 0)
where id = $1
`

func (q *Queries) RecalculateBookFavorites(ctx context.Context, bookID int64) error {
	_, err := q.db.Exec(ctx, recalculateBookFavorites, bookID)
	return err
}

const setUserFavourite = `-- name: SetUserFavourite :exec
insert into favorites (user_id, book_id, is_favorite)
values ($1, $2, $3)
on conflict (user_id, book_id) do update set is_favorite = $3
`

type SetUserFavouriteParams struct {
	UserID     pgtype.UUID
	BookID     int64
	IsFavorite bool
}

func (q *Queries) SetUserFavourite(ctx context.Context, arg SetUserFavouriteParams) error {
	_, err := q.db.Exec(ctx, setUserFavourite, arg.UserID, arg.BookID, arg.IsFavorite)
	return err
}
