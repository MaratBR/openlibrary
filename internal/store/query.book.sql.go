// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: query.book.sql

package store

import (
	"context"
	"net/netip"

	"github.com/jackc/pgx/v5/pgtype"
)

type AddMultipleBookViewsParams struct {
	IpAddress  netip.Addr
	BookID     int64
	RecordedAt pgtype.Timestamptz
}

const getBook = `-- name: GetBook :one
select books.id, books.name, books.summary, books.author_user_id, books.created_at, books.age_rating, books.is_publicly_visible, books.is_banned, books.words, books.chapters, books.tag_ids, books.cached_parent_tag_ids, books.favorites, books.has_cover, books.view, users.name as author_name
from books
join users on books.author_user_id = users.id
where books.id = $1
limit 1
`

type GetBookRow struct {
	ID                 int64
	Name               string
	Summary            string
	AuthorUserID       pgtype.UUID
	CreatedAt          pgtype.Timestamptz
	AgeRating          AgeRating
	IsPubliclyVisible  bool
	IsBanned           bool
	Words              int32
	Chapters           int32
	TagIds             []int64
	CachedParentTagIds []int64
	Favorites          int32
	HasCover           bool
	View               int32
	AuthorName         string
}

func (q *Queries) GetBook(ctx context.Context, id int64) (GetBookRow, error) {
	row := q.db.QueryRow(ctx, getBook, id)
	var i GetBookRow
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Summary,
		&i.AuthorUserID,
		&i.CreatedAt,
		&i.AgeRating,
		&i.IsPubliclyVisible,
		&i.IsBanned,
		&i.Words,
		&i.Chapters,
		&i.TagIds,
		&i.CachedParentTagIds,
		&i.Favorites,
		&i.HasCover,
		&i.View,
		&i.AuthorName,
	)
	return i, err
}

const getBookChapterWithDetails = `-- name: GetBookChapterWithDetails :one
select 
    bc.id, bc.name, bc.book_id, bc.content, bc."order", bc.created_at, bc.words, bc.is_adult_override, bc.summary,
    prev_chapter.id as prev_chapter_id,
    prev_chapter.name as prev_chapter_name,
    next_chapter.id as next_chapter_id,
    next_chapter.name as next_chapter_name
from book_chapters bc
left join book_chapters prev_chapter on prev_chapter.book_id = bc.book_id and prev_chapter."order" = bc."order" - 1
left join book_chapters next_chapter on next_chapter.book_id = bc.book_id and next_chapter."order" = bc."order" + 1
join books on bc.book_id = books.id
join users on users.id = books.author_user_id
where bc.id = $1 and bc.book_id = $2
`

type GetBookChapterWithDetailsParams struct {
	ID     int64
	BookID int64
}

type GetBookChapterWithDetailsRow struct {
	ID              int64
	Name            string
	BookID          int64
	Content         string
	Order           int32
	CreatedAt       pgtype.Timestamptz
	Words           int32
	IsAdultOverride bool
	Summary         string
	PrevChapterID   pgtype.Int8
	PrevChapterName pgtype.Text
	NextChapterID   pgtype.Int8
	NextChapterName pgtype.Text
}

func (q *Queries) GetBookChapterWithDetails(ctx context.Context, arg GetBookChapterWithDetailsParams) (GetBookChapterWithDetailsRow, error) {
	row := q.db.QueryRow(ctx, getBookChapterWithDetails, arg.ID, arg.BookID)
	var i GetBookChapterWithDetailsRow
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.BookID,
		&i.Content,
		&i.Order,
		&i.CreatedAt,
		&i.Words,
		&i.IsAdultOverride,
		&i.Summary,
		&i.PrevChapterID,
		&i.PrevChapterName,
		&i.NextChapterID,
		&i.NextChapterName,
	)
	return i, err
}

const getBookChapters = `-- name: GetBookChapters :many
select c.id, c.name, c.words, c."order", c.created_at, c.summary, c.is_adult_override
from book_chapters c
where book_id = $1
order by "order"
`

type GetBookChaptersRow struct {
	ID              int64
	Name            string
	Words           int32
	Order           int32
	CreatedAt       pgtype.Timestamptz
	Summary         string
	IsAdultOverride bool
}

func (q *Queries) GetBookChapters(ctx context.Context, bookID int64) ([]GetBookChaptersRow, error) {
	rows, err := q.db.Query(ctx, getBookChapters, bookID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetBookChaptersRow
	for rows.Next() {
		var i GetBookChaptersRow
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Words,
			&i.Order,
			&i.CreatedAt,
			&i.Summary,
			&i.IsAdultOverride,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getBookCollections = `-- name: GetBookCollections :many
select collections.id, collections.name, collections.books_count as size, collection_books."order" as position, collections.created_at, users.name as user_name, collections.user_id
from collections
join collection_books on collections.id = collection_books.collection_id
join users on collections.user_id = users.id
where collection_books.book_id = $1
order by collections.created_at desc
`

type GetBookCollectionsRow struct {
	ID        int64
	Name      string
	Size      int32
	Position  int32
	CreatedAt pgtype.Timestamptz
	UserName  string
	UserID    pgtype.UUID
}

func (q *Queries) GetBookCollections(ctx context.Context, bookID int64) ([]GetBookCollectionsRow, error) {
	rows, err := q.db.Query(ctx, getBookCollections, bookID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetBookCollectionsRow
	for rows.Next() {
		var i GetBookCollectionsRow
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Size,
			&i.Position,
			&i.CreatedAt,
			&i.UserName,
			&i.UserID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getBooksCollections = `-- name: GetBooksCollections :many
select collections.id, collections.name, collections.books_count as size, collection_books.book_id, collection_books."order" as position, collections.created_at, users.name as user_name, collections.user_id
from collections
join collection_books on collections.id = collection_books.collection_id
join users on collections.user_id = users.id
where collection_books.book_id = ANY($1::int8[])
order by collections.created_at desc
`

type GetBooksCollectionsRow struct {
	ID        int64
	Name      string
	Size      int32
	BookID    int64
	Position  int32
	CreatedAt pgtype.Timestamptz
	UserName  string
	UserID    pgtype.UUID
}

func (q *Queries) GetBooksCollections(ctx context.Context, dollar_1 []int64) ([]GetBooksCollectionsRow, error) {
	rows, err := q.db.Query(ctx, getBooksCollections, dollar_1)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetBooksCollectionsRow
	for rows.Next() {
		var i GetBooksCollectionsRow
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Size,
			&i.BookID,
			&i.Position,
			&i.CreatedAt,
			&i.UserName,
			&i.UserID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getTopUserBooks = `-- name: GetTopUserBooks :many
select id, name, summary, author_user_id, created_at, age_rating, is_publicly_visible, is_banned, words, chapters, tag_ids, cached_parent_tag_ids, favorites, has_cover, view
from books
where author_user_id = $1 and is_publicly_visible
order by favorites desc limit $2
`

type GetTopUserBooksParams struct {
	AuthorUserID pgtype.UUID
	Limit        int32
}

func (q *Queries) GetTopUserBooks(ctx context.Context, arg GetTopUserBooksParams) ([]Book, error) {
	rows, err := q.db.Query(ctx, getTopUserBooks, arg.AuthorUserID, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Book
	for rows.Next() {
		var i Book
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Summary,
			&i.AuthorUserID,
			&i.CreatedAt,
			&i.AgeRating,
			&i.IsPubliclyVisible,
			&i.IsBanned,
			&i.Words,
			&i.Chapters,
			&i.TagIds,
			&i.CachedParentTagIds,
			&i.Favorites,
			&i.HasCover,
			&i.View,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
