// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0

package store

import (
	"database/sql/driver"
	"fmt"
	"net/netip"

	"github.com/jackc/pgx/v5/pgtype"
)

type AgeRating string

const (
	AgeRatingValue0 AgeRating = "?"
	AgeRatingG      AgeRating = "G"
	AgeRatingPG     AgeRating = "PG"
	AgeRatingPG13   AgeRating = "PG-13"
	AgeRatingR      AgeRating = "R"
	AgeRatingNC17   AgeRating = "NC-17"
)

func (e *AgeRating) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = AgeRating(s)
	case string:
		*e = AgeRating(s)
	default:
		return fmt.Errorf("unsupported scan type for AgeRating: %T", src)
	}
	return nil
}

type NullAgeRating struct {
	AgeRating AgeRating
	Valid     bool // Valid is true if AgeRating is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullAgeRating) Scan(value interface{}) error {
	if value == nil {
		ns.AgeRating, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.AgeRating.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullAgeRating) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.AgeRating), nil
}

type BookActionType string

const (
	BookActionTypeSignificantUpdate BookActionType = "significant_update"
	BookActionTypeAuthorTransfer    BookActionType = "author_transfer"
	BookActionTypeCoauthorAdded     BookActionType = "coauthor_added"
	BookActionTypeCoauthorRemoved   BookActionType = "coauthor_removed"
	BookActionTypeBan               BookActionType = "ban"
	BookActionTypeShadowBan         BookActionType = "shadow_ban"
	BookActionTypePermRemoval       BookActionType = "perm_removal"
	BookActionTypeUnBan             BookActionType = "un_ban"
	BookActionTypeUnShadowBan       BookActionType = "un_shadow_ban"
	BookActionTypeReindex           BookActionType = "reindex"
)

func (e *BookActionType) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = BookActionType(s)
	case string:
		*e = BookActionType(s)
	default:
		return fmt.Errorf("unsupported scan type for BookActionType: %T", src)
	}
	return nil
}

type NullBookActionType struct {
	BookActionType BookActionType
	Valid          bool // Valid is true if BookActionType is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullBookActionType) Scan(value interface{}) error {
	if value == nil {
		ns.BookActionType, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.BookActionType.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullBookActionType) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.BookActionType), nil
}

type CensorMode string

const (
	CensorModeHide   CensorMode = "hide"
	CensorModeCensor CensorMode = "censor"
	CensorModeNone   CensorMode = "none"
)

func (e *CensorMode) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = CensorMode(s)
	case string:
		*e = CensorMode(s)
	default:
		return fmt.Errorf("unsupported scan type for CensorMode: %T", src)
	}
	return nil
}

type NullCensorMode struct {
	CensorMode CensorMode
	Valid      bool // Valid is true if CensorMode is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullCensorMode) Scan(value interface{}) error {
	if value == nil {
		ns.CensorMode, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.CensorMode.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullCensorMode) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.CensorMode), nil
}

type ReadingListStatus string

const (
	ReadingListStatusDnf        ReadingListStatus = "dnf"
	ReadingListStatusReading    ReadingListStatus = "reading"
	ReadingListStatusPaused     ReadingListStatus = "paused"
	ReadingListStatusRead       ReadingListStatus = "read"
	ReadingListStatusWantToRead ReadingListStatus = "want_to_read"
)

func (e *ReadingListStatus) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = ReadingListStatus(s)
	case string:
		*e = ReadingListStatus(s)
	default:
		return fmt.Errorf("unsupported scan type for ReadingListStatus: %T", src)
	}
	return nil
}

type NullReadingListStatus struct {
	ReadingListStatus ReadingListStatus
	Valid             bool // Valid is true if ReadingListStatus is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullReadingListStatus) Scan(value interface{}) error {
	if value == nil {
		ns.ReadingListStatus, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.ReadingListStatus.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullReadingListStatus) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.ReadingListStatus), nil
}

type TagType string

const (
	TagTypeFreeform TagType = "freeform"
	TagTypeWarning  TagType = "warning"
	TagTypeFandom   TagType = "fandom"
	TagTypeReltype  TagType = "reltype"
	TagTypeRel      TagType = "rel"
)

func (e *TagType) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = TagType(s)
	case string:
		*e = TagType(s)
	default:
		return fmt.Errorf("unsupported scan type for TagType: %T", src)
	}
	return nil
}

type NullTagType struct {
	TagType TagType
	Valid   bool // Valid is true if TagType is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullTagType) Scan(value interface{}) error {
	if value == nil {
		ns.TagType, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.TagType.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullTagType) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.TagType), nil
}

type TypeOf2fa string

const (
	TypeOf2faTotp     TypeOf2fa = "totp"
	TypeOf2faWebauthn TypeOf2fa = "webauthn"
)

func (e *TypeOf2fa) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = TypeOf2fa(s)
	case string:
		*e = TypeOf2fa(s)
	default:
		return fmt.Errorf("unsupported scan type for TypeOf2fa: %T", src)
	}
	return nil
}

type NullTypeOf2fa struct {
	TypeOf2fa TypeOf2fa
	Valid     bool // Valid is true if TypeOf2fa is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullTypeOf2fa) Scan(value interface{}) error {
	if value == nil {
		ns.TypeOf2fa, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.TypeOf2fa.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullTypeOf2fa) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.TypeOf2fa), nil
}

type UserActionType string

const (
	UserActionTypeSecPasswordReset UserActionType = "sec_password_reset"
	UserActionTypeSec2faUmbrella   UserActionType = "sec_2fa_umbrella"
	UserActionTypeBan              UserActionType = "ban"
	UserActionTypeUnban            UserActionType = "unban"
	UserActionTypeMute             UserActionType = "mute"
	UserActionTypeUnmute           UserActionType = "unmute"
)

func (e *UserActionType) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = UserActionType(s)
	case string:
		*e = UserActionType(s)
	default:
		return fmt.Errorf("unsupported scan type for UserActionType: %T", src)
	}
	return nil
}

type NullUserActionType struct {
	UserActionType UserActionType
	Valid          bool // Valid is true if UserActionType is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullUserActionType) Scan(value interface{}) error {
	if value == nil {
		ns.UserActionType, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.UserActionType.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullUserActionType) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.UserActionType), nil
}

type UserRole string

const (
	UserRoleUser      UserRole = "user"
	UserRoleAdmin     UserRole = "admin"
	UserRoleModerator UserRole = "moderator"
	UserRoleSystem    UserRole = "system"
)

func (e *UserRole) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = UserRole(s)
	case string:
		*e = UserRole(s)
	default:
		return fmt.Errorf("unsupported scan type for UserRole: %T", src)
	}
	return nil
}

type NullUserRole struct {
	UserRole UserRole
	Valid    bool // Valid is true if UserRole is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullUserRole) Scan(value interface{}) error {
	if value == nil {
		ns.UserRole, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.UserRole.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullUserRole) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.UserRole), nil
}

type Book struct {
	ID                 int64
	Name               string
	Summary            string
	AuthorUserID       pgtype.UUID
	CreatedAt          pgtype.Timestamptz
	AgeRating          AgeRating
	IsPubliclyVisible  bool
	IsBanned           bool
	Words              int32
	Chapters           int32
	TagIds             []int64
	CachedParentTagIds []int64
	HasCover           bool
	View               int32
	Rating             pgtype.Float8
	TotalReviews       int32
	TotalRatings       int32
	IsPinned           bool
	IsPermRemoved      bool
	IsShadowBanned     bool
}

type BookBanHistory struct {
	BookID    int64
	UserID    pgtype.UUID
	CreatedAt pgtype.Timestamptz
	Reason    string
	Action    string
}

type BookChapter struct {
	ID              int64
	Name            string
	BookID          int64
	Content         string
	Order           int32
	CreatedAt       pgtype.Timestamptz
	Words           int32
	IsAdultOverride bool
	Summary         string
}

type BookLog struct {
	ID          int64
	Time        pgtype.Timestamptz
	BookID      int64
	ActionType  BookActionType
	Payload     []byte
	ActorUserID pgtype.UUID
	Reason      string
}

type BookView struct {
	IpAddress  netip.Addr
	BookID     int64
	RecordedAt pgtype.Timestamptz
}

type Collection struct {
	ID         int64
	Name       string
	UserID     pgtype.UUID
	CreatedAt  pgtype.Timestamptz
	BooksCount int32
}

type CollectionBook struct {
	CollectionID int64
	BookID       int64
	Order        int32
}

type Comment struct {
	ID            int64
	ChapterID     int64
	UserID        pgtype.UUID
	Content       string
	Ts            pgtype.Timestamptz
	UpdatedAt     pgtype.Timestamptz
	DeletedAt     pgtype.Timestamptz
	ParentID      pgtype.Int8
	QuoteContent  pgtype.Text
	QuoteStartPos pgtype.Int4
}

type DefinedTag struct {
	ID             int64
	Name           string
	Description    string
	IsSpoiler      bool
	IsAdult        bool
	CreatedAt      pgtype.Timestamptz
	TagType        TagType
	SynonymOf      pgtype.Int8
	IsDefault      bool
	LowercasedName string
}

type Draft struct {
	ID              int64
	CreatedBy       pgtype.UUID
	ChapterID       int64
	ChapterName     string
	Content         string
	Words           int32
	Summary         string
	IsAdultOverride bool
	UpdatedAt       pgtype.Timestamptz
	CreatedAt       pgtype.Timestamptz
	PublishedAt     pgtype.Timestamptz
}

type DraftLog struct {
	ID        int64
	DraftID   int64
	CreatedAt pgtype.Timestamptz
	UserID    pgtype.UUID
	Payload   []byte
}

type Rating struct {
	UserID    pgtype.UUID
	BookID    int64
	Rating    int16
	UpdatedAt pgtype.Timestamptz
}

type ReadingList struct {
	UserID                pgtype.UUID
	BookID                int64
	Status                ReadingListStatus
	LastAccessedChapterID pgtype.Int8
	LastUpdatedAt         pgtype.Timestamptz
}

type ReadingListHistory struct {
	UserID          pgtype.UUID
	BookID          int64
	ChapterID       int64
	FinishedReading bool
	Progress        int32
}

type Review struct {
	UserID        pgtype.UUID
	BookID        int64
	Content       string
	CreatedAt     pgtype.Timestamptz
	LastUpdatedAt pgtype.Timestamptz
	Likes         int32
}

type Session struct {
	ID           int64
	Sid          string
	UserID       pgtype.UUID
	CreatedAt    pgtype.Timestamptz
	UserAgent    string
	IpAddress    string
	ExpiresAt    pgtype.Timestamptz
	IsTerminated bool
}

type User struct {
	ID                    pgtype.UUID
	Name                  string
	JoinedAt              pgtype.Timestamptz
	PasswordHash          string
	Role                  UserRole
	IsBanned              bool
	AvatarFile            pgtype.Text
	About                 string
	Gender                string
	ProfileCss            string
	EnableProfileCss      bool
	DefaultTheme          string
	PrivacyHideStats      bool
	PrivacyHideComments   bool
	PrivacyHideEmail      bool
	PrivacyAllowSearching bool
	ShowAdultContent      bool
	CensoredTags          []string
	CensoredTagsMode      CensorMode
}

type User2fa struct {
	ID          pgtype.UUID
	UserID      pgtype.UUID
	Type        TypeOf2fa
	Key         string
	CreatedAt   pgtype.Timestamptz
	Initialized bool
	Active      bool
}

type UserBan struct {
	ID             int64
	UserID         pgtype.UUID
	CreatedAt      pgtype.Timestamptz
	BannedByUserID pgtype.UUID
	Note           string
	ExpiresAt      pgtype.Timestamptz
}

type UserFollower struct {
	FollowerID pgtype.UUID
	FollowedID pgtype.UUID
	CreatedAt  pgtype.Timestamptz
}

type UserLog struct {
	ID          int64
	UserID      pgtype.UUID
	ActorUserID pgtype.UUID
	ActionType  UserActionType
	Payload     []byte
}
