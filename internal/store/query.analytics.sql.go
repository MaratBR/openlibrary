// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: query.analytics.sql

package store

import (
	"context"
)

const analytics_GetViewBuckets = `-- name: Analytics_GetViewBuckets :many
select "period", count
from ol_analytics.view_bucket
where book_id = $1 and "period" >= $2 and "period" <= $3
`

type Analytics_GetViewBucketsParams struct {
	BookID int64
	From   int32
	To     int32
}

type Analytics_GetViewBucketsRow struct {
	Period int32
	Count  int64
}

func (q *Queries) Analytics_GetViewBuckets(ctx context.Context, arg Analytics_GetViewBucketsParams) ([]Analytics_GetViewBucketsRow, error) {
	rows, err := q.db.Query(ctx, analytics_GetViewBuckets, arg.BookID, arg.From, arg.To)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Analytics_GetViewBucketsRow
	for rows.Next() {
		var i Analytics_GetViewBucketsRow
		if err := rows.Scan(&i.Period, &i.Count); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const analytics_GetViews = `-- name: Analytics_GetViews :many
select "period", count
from ol_analytics.view_bucket
where 
    book_id = $1 and (
        "period" = 0 or
        "period" = $2 or
        "period" = $3 or
        "period" = $4 or
        "period" = $5 or
        "period" = $6
    )
`

type Analytics_GetViewsParams struct {
	BookID      int64
	YearPeriod  int32
	MonthPeriod int32
	WeekPeriod  int32
	DayPeriod   int32
	HourPeriod  int32
}

type Analytics_GetViewsRow struct {
	Period int32
	Count  int64
}

func (q *Queries) Analytics_GetViews(ctx context.Context, arg Analytics_GetViewsParams) ([]Analytics_GetViewsRow, error) {
	rows, err := q.db.Query(ctx, analytics_GetViews,
		arg.BookID,
		arg.YearPeriod,
		arg.MonthPeriod,
		arg.WeekPeriod,
		arg.DayPeriod,
		arg.HourPeriod,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Analytics_GetViewsRow
	for rows.Next() {
		var i Analytics_GetViewsRow
		if err := rows.Scan(&i.Period, &i.Count); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const analytics_IncrView = `-- name: Analytics_IncrView :exec
insert into ol_analytics.view_bucket ("period", book_id, count)
values ($1, $2, $3)
on conflict ("period", book_id)
do update set count = count + $3
`

type Analytics_IncrViewParams struct {
	Period int32
	BookID int64
	Count  int64
}

func (q *Queries) Analytics_IncrView(ctx context.Context, arg Analytics_IncrViewParams) error {
	_, err := q.db.Exec(ctx, analytics_IncrView, arg.Period, arg.BookID, arg.Count)
	return err
}
