// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: query.draft.sql

package store

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const deleteDraft = `-- name: DeleteDraft :exec
delete from drafts where id = $1
`

func (q *Queries) DeleteDraft(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteDraft, id)
	return err
}

const getDraftById = `-- name: GetDraftById :one
select id, created_by, chapter_id, chapter_name, content, words, summary, is_adult_override, updated_at, created_at
from drafts 
where id = $1
`

func (q *Queries) GetDraftById(ctx context.Context, id int64) (Draft, error) {
	row := q.db.QueryRow(ctx, getDraftById, id)
	var i Draft
	err := row.Scan(
		&i.ID,
		&i.CreatedBy,
		&i.ChapterID,
		&i.ChapterName,
		&i.Content,
		&i.Words,
		&i.Summary,
		&i.IsAdultOverride,
		&i.UpdatedAt,
		&i.CreatedAt,
	)
	return i, err
}

const getLatestDraftID = `-- name: GetLatestDraftID :one
select id
from drafts
where chapter_id = $1
order by coalesce(updated_at, created_at) desc
limit 1
`

func (q *Queries) GetLatestDraftID(ctx context.Context, chapterID int64) (int64, error) {
	row := q.db.QueryRow(ctx, getLatestDraftID, chapterID)
	var id int64
	err := row.Scan(&id)
	return id, err
}

const insertDraft = `-- name: InsertDraft :exec
insert into drafts (
    id, created_by, chapter_id, chapter_name, content, updated_at, created_at)
values ($1, $2, $3, $4, $5, $6, $7)
`

type InsertDraftParams struct {
	ID          int64
	CreatedBy   pgtype.UUID
	ChapterID   int64
	ChapterName string
	Content     string
	UpdatedAt   pgtype.Timestamptz
	CreatedAt   pgtype.Timestamptz
}

func (q *Queries) InsertDraft(ctx context.Context, arg InsertDraftParams) error {
	_, err := q.db.Exec(ctx, insertDraft,
		arg.ID,
		arg.CreatedBy,
		arg.ChapterID,
		arg.ChapterName,
		arg.Content,
		arg.UpdatedAt,
		arg.CreatedAt,
	)
	return err
}

const markDraftAsPublished = `-- name: MarkDraftAsPublished :exec
update drafts
set published_at = now()
where id = $1
`

func (q *Queries) MarkDraftAsPublished(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, markDraftAsPublished, id)
	return err
}

const updateDraft = `-- name: UpdateDraft :exec
update drafts
set chapter_name = $2, is_adult_override = $3, words = $4, content = $5, summary = $6, updated_at = now()
where id = $1
`

type UpdateDraftParams struct {
	ID              int64
	ChapterName     string
	IsAdultOverride bool
	Words           int32
	Content         string
	Summary         string
}

func (q *Queries) UpdateDraft(ctx context.Context, arg UpdateDraftParams) error {
	_, err := q.db.Exec(ctx, updateDraft,
		arg.ID,
		arg.ChapterName,
		arg.IsAdultOverride,
		arg.Words,
		arg.Content,
		arg.Summary,
	)
	return err
}
